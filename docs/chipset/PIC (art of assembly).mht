Content-Type: multipart/related; start=<op.mhtml.1214610490351.9959957d4a16e9a8@192.168.0.5>; boundary=----------3iWa64gvP3nDdSNVtNkmaa
Content-Location: http://webster.cs.ucr.edu/AoA/DOS/ch17/CH17-3.html
Subject: =?utf-8?Q?Art=20of=20Assembly:=20Chaper=20Seventeen-3?=
MIME-Version: 1.0

------------3iWa64gvP3nDdSNVtNkmaa
Content-Disposition: inline; filename=CH17-3.html
Content-Type: text/html; charset=UTF-8; name=CH17-3.html
Content-Id: <op.mhtml.1214610490351.9959957d4a16e9a8@192.168.0.5>
Content-Location: http://webster.cs.ucr.edu/AoA/DOS/ch17/CH17-3.html
Content-Transfer-Encoding: 8bit

<html>

	<!--#exec cmd="/local/www/cgi-bin/Counter/count_silent.cgi ArtOfAsm/ch17"-->
	<!-- Generated by Harlequin WebMaker 2.2.6 (30-Apr-1996)
Macintosh Common Lisp Version 3.0kp2p2 [AppGen 3.0b1kp2p2] -->

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<meta name="generator" content="Adobe GoLive 4">
		<title>Art of Assembly: Chaper Seventeen-3</title>
	</head>

	<body>
		<a name="HEADING3"></a><a href="CH17-1.html">[Chaper Seventeen]</a><a href="CH17-2.html">[Previous] </a><a href="CH17-4.html">[Next] </a><a href="../AoADosIndex.html">[Art of Assembly]</a><a href="http://www.cs.ucr.edu/%7erhyde">[Randall Hyde]</a><br>
		<br>
		Art of Assembly: Chaper Seventeen<br>
		<br>
		<hr>
		<!-- TOC -->
		<dl>
			<dt><a href="#HEADING3-1"><b>17.4 </b>- Hardware Interrupts</a>
			<dt><a href="#HEADING3-4"><b>17.4.1 </b>- The 8259A Programmable Interrupt Controller (PIC)</a>
			<dt><a href="#HEADING3-39"><b>17.4.2 </b>- The Timer Interrupt (INT 8)</a>
			<dt><a href="#HEADING3-44"><b>17.4.3 </b>- The Keyboard Interrupt (INT 9)</a>
			<dt><a href="#HEADING3-47"><b>17.4.4 </b>- The Serial Port Interrupts (INT 0Bh and INT 0Ch)</a>
			<dt><a href="#HEADING3-50"><b>17.4.5 </b>- The Parallel Port Interrupts (INT 0Dh and INT 0Fh)</a>
			<dt><a href="#HEADING3-54"><b>17.4.6 </b>- The Diskette and Hard Drive Interrupts (INT 0Eh and INT 76h)</a>
			<dt><a href="#HEADING3-58"><b>17.4.7 </b>- The Real-Time Clock Interrupt (INT 70h)</a>
			<dt><a href="#HEADING3-60"><b>17.4.8 </b>- The FPU Interrupt (INT 75h)</a>
			<dt><a href="#HEADING3-63"><b>17.4.9 </b>- Nonmaskable Interrupts (INT 2)</a>
			<dt><a href="#HEADING3-66"><b>17.4.10 </b>- Other Interrupts</a><br>
			<a name="HEADING3-1"></a>
			<hr>
		</dl>
		<h2>17.4 Hardware Interrupts</h2>
		<p>
		<hr>
		Hardware interrupts are the form most engineers (as opposed to PC programmers) associate with the term interrupt. We will adopt this same strategy henceforth and will use the non-modified term &quot;interrupt&quot; to mean a hardware interrupt.<br>
		<br>
		On the PC, interrupts come from many different sources. The primary sources of interrupts, however, are the PCs timer chip, keyboard, serial ports, parallel ports, disk drives, CMOS real-time clock, mouse, sound cards, and other peripheral devices. These devices connect to an Intel 8259A programmable interrupt controller (PIC) that prioritizes the interrupts and interfaces with the 80x86 CPU. The 8259A chip adds considerable complexity to the software that processes interrupts, so it makes perfect sense to discuss the PIC first, before trying to describe how the interrupt service routines have to deal with it. Afterwards, this section will briefly describe each device and the conditions under which it interrupts the CPU. This text will fully describe many of these devices in later chapters, so this chapter will not go into a lot of detail except when discussing the timer interrupt.<br>
		<br>
		<a name="HEADING3-4"></a>
		<hr>
		<h3>17.4.1 The 8259A Programmable Interrupt Controller (PIC)</h3>
		<p>
		<hr>
		The 8259A (8259<a href="#FOOTNOTE-6">[6]</a> or PIC, hereafter) programmable interrupt controller chip accepts interrupts from up to eight different devices. If any one of the devices requests service, the 8259 will toggle an interrupt output line (connected to the CPU) and pass a programmable interrupt vector to the CPU. You can cascade the device to support up to 64 devices by connecting nine 8259s together: eight of the devices with eight inputs each whose outputs become the eight inputs of the ninth device. A typical PC uses two of these devices to provide 15 interrupt inputs (seven on the master PIC with the eight input coming from the slave PIC to process its eight inputs)<a href="#FOOTNOTE-7">[7]</a>. The sections following this one will describe the devices connected to each of those inputs, for now we will concentrate on what the 8259 does with those inputs. Nevertheless, for the sake of discussion, the following table lists the interrupt sources on the PC:<br>
		<br>
		<table border="1">
			<caption>8259 Programmable Interrupt Controller Inputs</caption>
			<tr>
				<th>Input on 8259</th>
				<th>80x86 INT</th>
				<th>Device</th>
			</tr>
			<tr>
				<td>IRQ 0</td>
				<td>8</td>
				<td>Timer chip</td>
			</tr>
			<tr>
				<td>IRQ 1</td>
				<td>9</td>
				<td>Keyboard</td>
			</tr>
			<tr>
				<td>IRQ 2</td>
				<td>0Ah</td>
				<td>Cascade for controller 2 (IRQ 8-15)</td>
			</tr>
			<tr>
				<td>IRQ 3</td>
				<td>0Bh</td>
				<td>Serial port 2</td>
			</tr>
			<tr>
				<td>IRQ 4</td>
				<td>0Ch</td>
				<td>Serial port 1</td>
			</tr>
			<tr>
				<td>IRQ 5</td>
				<td>0Dh</td>
				<td>Parallel port 2 in AT, reserved in PS/2 systems</td>
			</tr>
			<tr>
				<td>IRQ 6</td>
				<td>0Eh</td>
				<td>Diskette drive</td>
			</tr>
			<tr>
				<td>IRQ 7</td>
				<td>0Fh</td>
				<td>Parallel port 1</td>
			</tr>
			<tr>
				<td>IRQ 8/0</td>
				<td>70h</td>
				<td>Real-time clock</td>
			</tr>
			<tr>
				<td>IRQ 9/1</td>
				<td>71h</td>
				<td>CGA vertical retrace (and other IRQ 2 devices)</td>
			</tr>
			<tr>
				<td>IRQ 10/2</td>
				<td>72h</td>
				<td>Reserved</td>
			</tr>
			<tr>
				<td>IRQ 11/3</td>
				<td>73h</td>
				<td>Reserved</td>
			</tr>
			<tr>
				<td>IRQ 12/4</td>
				<td>74h</td>
				<td>Reserved in AT, auxiliary device on PS/2 systems</td>
			</tr>
			<tr>
				<td>IRQ 13/5</td>
				<td>75h</td>
				<td>FPU interrupt</td>
			</tr>
			<tr>
				<td>IRQ 14/6</td>
				<td>76h</td>
				<td>Hard disk controller</td>
			</tr>
			<tr>
				<td>IRQ 15/7</td>
				<td>77h</td>
				<td>Reserved</td>
			</tr>
		</table>
		<br>
		<br>
		The 8259 PIC is a very complex chip to program. Fortunately, all of the hard stuff has already been done for you by the BIOS when the system boots. We will not discuss how to initialize the 8259 in this text because that information is only useful to those writing operating systems like Linux, Windows, or OS/2. If you want your interrupt service routines to run correctly under DOS or any other OS, you must not reinitialize the PIC.<br>
		<br>
		The PICs interface to the system through four I/O locations: ports 20h/0A0h and 21h/0A1h. The first address in each pair is the address of the master PIC (IRQ 0-7), the second address in each pair corresponds to the slave PIC (IRQ 8-15). Port 20h/0A0h is a read/write location to which you write PIC commands and read PIC status, we will refer to this as the command register or the status register. The command register is write only, the status register is read only. They just happen to share the same I/O location. The read/write lines on the PIC determine which register the CPU accesses. Port 21h/0A1h is a read/write location that contains the interrupt mask register, we will refer to this as the mask register. Choose the appropriate address depending upon which interrupt controller you want to use.<br>
		<br>
		The interrupt mask register is an eight bit register that lets you individually enable and disable interrupts from devices on the system. This is similar to the actions of the <code>cli </code>and <code>sti </code>instructions, but on a device by device basis. Writing a zero to the corresponding bit enables that device's interrupts. Writing a one disables interrupts from the affected device. Note that this is non-intuitive. The figure below provides the layout of the interrupt mask register.<br>
		<center>
			<p><img src="CH17A.gif" width="290" height="210" naturalsizeflag="3" align="bottom"></center>
		<p>When changing bits in the mask register, it is important that you not simply load <code>al</code> with a value and output it directly to the mask register port. Instead, you should read the mask register and then logically <code>or </code>in or <code>and </code>out the bits you want to change; finally, you can write the output back to the mask register. The following code sequence enables COM1: interrupts without affecting any others:<br>
		</p>
		<pre>




                in      al, 21h         ;Read existing bits.
                and     al, 0efh        ;Turn on IRQ 4 (COM1).
                out     21h, al         ;Write result back to PIC.</pre>
		<p>The command register provides lots of options, but there are only three commands you would want to execute on this chip that are compatible with the BIOS' initialization of the 8259: sending an end of interrupt command and sending one of two read status register commands.<br>
		<br>
		One a specific interrupt occurs, the 8259 masks all further interrupts from that device until is receives an end of interrupt signal from the interrupt service routine. On PCs running DOS, you accomplish this by writing the value 20h to the command register. The following code does this:<br>
		<pre>




                mov     al, 20h
                out     20h, al         ;Port 0A0h if IRQ 8-15.</pre>
		<p>You must send exactly one end of interrupt command to the PIC for each interrupt you service. If you do not send the end of interrupt command, the PIC will not honor any more interrupts from that device; if you send two or more end of interrupt commands, there is the possibility that you will accidentally acknowledge a new interrupt that may be pending and you will lose that interrupt.<br>
		<br>
		For some interrupt service routines you write, your ISR will not be the only ISR that an interrupt invokes. For example, the PC's BIOS provides an ISR for the timer interrupt that maintains the time of day. If you patch into the timer interrupt, you will need to call the PC BIOS' timer ISR so the system can properly maintain the time of day and handle other timing related chores (see <a href="#nonexistent-marker">&quot;Chaining Interrupt Service Routines&quot; on page 1010</a>). However, the BIOS' timer ISR outputs the end of interrupt command. Therefore, you should not output the end of interrupt command yourself, otherwise the BIOS will output a second end of interrupt command and you may lose an interrupt in the process.<br>
		<br>
		The other two commands you can send the 8259 let you select whether to read the in-service register (ISR) or the interrupt request register (IRR). The in-service register contains set bits for each active ISR (because the 8259 allows prioritized interrupts, it is quite possible that one ISR has been interrupted by a higher priority ISR). The interrupt request register contains set bits in corresponding positions for interrupts that have not yet been serviced (probably because they are a lower priority interrupt than the interrupt currently being serviced by the system). To read the in-service register, you would execute the following statements:<br>
		<pre>




; Read the in-service register in PIC #1 (at I/O address 20h)

                mov     al, 0bh
                out     20h, al
                in      al, 20h</pre>
		<p>To read the interrupt request register, you would use the following code:<br>
		<pre>




; Read the interrupt request register in PIC #1 (at I/O address 20h)

                mov     al, 0ah
                out     20h, al
                in      al, 20h</pre>
		<p>Writing any other values to the command port may cause your system to malfunction.<br>
		<br>
		<a name="HEADING3-39"></a>
		<hr>
		<h3>17.4.2 The Timer Interrupt (INT 8)</h3>
		<p>
		<hr>
		The PC's motherboard contains an 8254 compatible timer chip. This chip contains three timer channels, one of which generates interrupts every 55 msec (approximately). This is about once every 1/18.2 seconds. You will often hear this interrupt referred to as the &quot;eighteenth second clock.&quot; We will simply call it the timer interrupt.<br>
		<br>
		The timer interrupt vector is probably the most commonly patched interrupt in the system. It turns out there are two timer interrupt vectors in the system. Int 8 is the hardware vector associated with the timer interrupt (since it comes in on IRQ 0 on the PIC). Generally, you should not patch this interrupt if you want to write a timer ISR. Instead, you should patch the second timer interrupt, interrupt 1ch. The BIOS' timer interrupt handler (int 8) executes an <code>int 1ch</code> instruction before it returns. This gives a user patched routine access to the timer interrupt. Unless you are willing to duplicate the BIOS and DOS timer code, you should never completely replace the existing timer ISR with one of your own, you should always ensure that the BIOS and DOS ISRs execute in addition to your ISR. Patching into the int 1ch vector is the easiest way to do this.<br>
		<br>
		Even replacing the int 1ch vector with a pointer to your ISR is very dangerous. The timer interrupt service routine is the one most commonly patched by various resident programs. By simply writing the address of your ISR into the timer interrupt vector, you may disable such resident programs and cause your system to malfunction. To solve this problem, you need to create an interrupt chain. For more details, see the section <a href="#nonexistent-marker">&quot;Chaining Interrupt Service Routines&quot; on page 1010</a>.<br>
		<br>
		By default the timer interrupt is always enabled on the interrupt controller chip. Indeed, disabling this interrupt may cause your system to crash or otherwise malfunction. At the very least, you system will not maintain the correct time if you disable the timer interrupt.<br>
		<br>
		<a name="HEADING3-44"></a>
		<hr>
		<h3>17.4.3 The Keyboard Interrupt (INT 9)</h3>
		<p>
		<hr>
		The keyboard microcontroller on the PC's motherboard generates two interrupts on each keystroke - one when you press a key and one when you release it. This is on IRQ 1 on the master PIC. The BIOS responds to this interrupt by reading the keyboard's scan code, converting this to an ASCII character, and storing the scan and ASCII codes away in the system type ahead buffer.<br>
		<br>
		By default, this interrupt is always enabled. If you disable this interrupt, the system will not be able to respond to any keystrokes, including ctrl-alt-del. Therefore, your programs should always reenable this interrupt if they ever disable it.<br>
		<br>
		<a name="HEADING3-47"></a>
		<hr>
		<h3>17.4.4 The Serial Port Interrupts (INT 0Bh and INT 0Ch)</h3>
		<p>
		<hr>
		The PC uses two interrupts, IRQ 3 and IRQ 4, to support interrupt driven serial communications. The 8250 (or compatible) serial communications controller chip (SCC) generates an interrupt in one of four situations: a character arriving over the serial line, the SCC finishes the transmission of a character and is requesting another, an error occurs, or a status change occurs. The SCC activates the same interrupt line (IRQ 3 or 4) for all four interrupt sources. The interrupt service routine is responsible for determining the exact nature of the interrupt by interrogating the SCC.<br>
		<br>
		By default, the system disables IRQ 3 and IRQ 4. If you install a serial ISR, you will need to clear the interrupt mask bit in the 8259 PIC before it will respond to interrupts from the SCC. Furthermore, the SCC design includes its own interrupt mask. You will need to enable the interrupt masks on the SCC chip as well. For more information on the SCC, see the appropriate chapter.<br>
		<br>
		<a name="HEADING3-50"></a>
		<hr>
		<h3>17.4.5 The Parallel Port Interrupts (INT 0Dh and INT 0Fh)</h3>
		<p>
		<hr>
		The parallel port interrupts are an enigma. IBM designed the original system to allow two parallel port interrupts and then promptly designed a printer interface card that didn't support the use of interrupts. As a result, almost no DOS based software today uses the parallel port interrupts (IRQ 5 and IRQ 7). Indeed, on the PS/2 systems IBM reserved IRQ5 which they formerly used for LPT2:.<br>
		<br>
		However, these interrupts have not gone to waste. Many devices which IBM's engineers couldn't even conceive when designing the first PC have made good use of these interrupts. Examples include SCSI cards and sound cards. Many devices today include &quot;interrupt jumpers&quot; that let you select IRQ 5 or IRQ 7 when installing the device.<br>
		<br>
		Since IRQ 5 and IRQ 7 find such little use as parallel port interrupts, we will effectively ignore the &quot;parallel port interrupts&quot; in this text.<br>
		<br>
		<a name="HEADING3-54"></a>
		<hr>
		<h3>17.4.6 The Diskette and Hard Drive Interrupts (INT 0Eh and INT 76h)</h3>
		<p>
		<hr>
		The floppy and hard disk drives generate interrupts at the completion of a disk operation. This is a very useful feature for multitasking systems like OS/2, Linux, or Windows. While the disk is reading or writing data, the CPU can go execute instructions for another process. When the disk finishes the read or write operation, it interrupts the CPU so it can resume the original task.<br>
		<br>
		While managing the disk drives would be an interesting topic to cover in this text, this book is already long enough. Therefore, this text will avoid discussing the disk drive interrupts (IRQ 6 and IRQ 14) in the interest of saving some space. There are many texts that cover low level disk I/O in assembly language, see the bibliography for details.<br>
		<br>
		By default, the floppy and hard disk interrupts are always enabled. You should not change this status if you intend to use the disk drives on your system.<br>
		<br>
		<a name="HEADING3-58"></a>
		<hr>
		<h3>17.4.7 The Real-Time Clock Interrupt (INT 70h)</h3>
		<p>
		<hr>
		PC/AT and later machines included a CMOS real-time clock. This device is capable of generating timer interrupts in multiples of 976 <em>m</em>sec (let's call it 1 msec). By default, the real-time clock interrupt is disabled. You should only enable this interrupt if you have an int 70h ISR installed.<br>
		<br>
		<a name="HEADING3-60"></a>
		<hr>
		<h3>17.4.8 The FPU Interrupt (INT 75h)</h3>
		<p>
		<hr>
		The 80x87 FPU generates an interrupt whenever a floating point exception occurs. On CPUs with built-in FPUs (80486DX and better) there is a bit in one of the control register you can set to simulate a vectored interrupt. BIOS generally initializes such bits for compatibility with existing systems.<br>
		<br>
		By default, BIOS disables the FPU interrupt. Most programs that use the FPU explicitly test the FPU's status register to determine if an error occurs. If you want to allow FPU interrupts, you must enable the interrupts on the 8259 and on the 80x87 FPU.<br>
		<br>
		<a name="HEADING3-63"></a>
		<hr>
		<h3>17.4.9 Nonmaskable Interrupts (INT 2)</h3>
		<p>
		<hr>
		The 80x86 chips actually provide two interrupt input pins. The first is the maskable interrupt. This is the pin to which the 8259 PIC connects. This interrupt is maskable because you can enable or disable it with the <code>cli</code> and <code>sti</code> instructions. The nonmaskable interrupt, as its name implies, cannot be disabled under software control. Generally, PCs use this interrupt to signal a memory parity error, although certain systems use this interrupt for other purposes as well. Many older PC systems connect the FPU to this interrupt.<br>
		<br>
		This interrupt cannot be masked, so it is always enabled by default.<br>
		<br>
		<a name="HEADING3-66"></a>
		<hr>
		<h3>17.4.10 Other Interrupts</h3>
		<p>
		<hr>
		As mentioned in the section on the 8259 PIC, there are several interrupts reserved by IBM. Many systems use the reserved interrupts for the mouse or for other purposes. Since such interrupts are inherently system dependent, we will not describe them here.<br>
		<br>
		<hr>
		<a name="FOOTNOTE-6"></a>[6] The original 8259 was designed for Intel's 8080 system. The 8259A provided support for the 80x86 and some other features. Since almost no one uses 8259 chips anymore, this text will use the generic term 8259.
		<hr>
		<a name="FOOTNOTE-7"></a>[7] The original IBM PC and PC/XT machines only supported eight interrupts via one 8259 chip. IBM, and virtually all clone manufacturers, added the second PIC in PC/AT and later designs. <!-- TOC -->
		<dl>
			<dt><a href="#HEADING3-1"><b>17.4 </b>- Hardware Interrupts</a>
			<dt><a href="#HEADING3-4"><b>17.4.1 </b>- The 8259A Programmable Interrupt Controller (PIC)</a>
			<dt><a href="#HEADING3-39"><b>17.4.2 </b>- The Timer Interrupt (INT 8)</a>
			<dt><a href="#HEADING3-44"><b>17.4.3 </b>- The Keyboard Interrupt (INT 9)</a>
			<dt><a href="#HEADING3-47"><b>17.4.4 </b>- The Serial Port Interrupts (INT 0Bh and INT 0Ch)</a>
			<dt><a href="#HEADING3-50"><b>17.4.5 </b>- The Parallel Port Interrupts (INT 0Dh and INT 0Fh)</a>
			<dt><a href="#HEADING3-54"><b>17.4.6 </b>- The Diskette and Hard Drive Interrupts (INT 0Eh and INT 76h)</a>
			<dt><a href="#HEADING3-58"><b>17.4.7 </b>- The Real-Time Clock Interrupt (INT 70h)</a>
			<dt><a href="#HEADING3-60"><b>17.4.8 </b>- The FPU Interrupt (INT 75h)</a>
			<dt><a href="#HEADING3-63"><b>17.4.9 </b>- Nonmaskable Interrupts (INT 2)</a>
			<dt><a href="#HEADING3-66"><b>17.4.10 </b>- Other Interrupts</a>
		</dl>
		<p>
		<hr>
		Art of Assembly: Chaper Seventeen - 29 SEP 1996<br>
		<br>
		<a href="CH17-1.html">[Chaper Seventeen]</a><a href="CH17-2.html">[Previous] </a><a href="CH17-4.html">[Next] </a><a href="../AoADosIndex.html">[Art of Assembly]</a><a href="http://www.cs.ucr.edu/%7erhyde">[Randall Hyde]</a><br>
		<br>
		<br>
		<hr>
		</p>
		<h2>Number of Web Site Hits since Jan 1, 2000:</h2>
		<p><img src="http://www.cs.ucr.edu/cgi-bin/counter.cgi?df=rhyde|md=8">
	</body>

</html>

------------3iWa64gvP3nDdSNVtNkmaa
Content-Disposition: inline; filename=CH17A.gif
Content-Type: image/gif; name=CH17A.gif
Content-Location: http://webster.cs.ucr.edu/AoA/DOS/ch17/CH17A.gif
Content-Transfer-Encoding: Base64

R0lGODlhIgHSAKEAAAAAAKqqqv///wBkACH5BAEAAAIALAAAAAAiAdIAAAL+lA2n
musPYVuTxVgp2PvebHniSJbmiaZqiK0kKMCwN8eU+9T4zvd+P0l0EEPiQSiMJY8I
JRFUND4zHGaTZT1Sl8FhVWuJ/sbkMq57tVkbxXbIm2Zs48F1/K6+1p3qfYUNZiY4
SCiyp5dl84cFyCSTt3SDF4mVZ0nZCJXYWNjpSXjYp8WByUhn6Zgq99c2Qyr2Wgrp
NgX3eYvrE8qpufkWltPEy/nmKjn5KxmamNvsXLKbtrjoe4mKmFmJHXw8nfxNrfM8
Th5tLcrMpo7ocDiclX1c7RePzn5Nnl9efWkuJxqlF6RR0mihEigFzDBqCfHpewjR
jLiINChavBhxIsb+exs7evSksaOYjyRLmjyJMqXKlSxbunwJM6bMmTRr2ryJM6fO
nTx7+vxpMZaKkSOEDh1K9EVICSu+AC209Bs0Hkkr4il6tWhUFlufpujaVRsKSkdN
MJwadqBXQWGRfHV6gtjXsWKxzs26lupbvC34MvX7IS0zs2Ud5j1T2LDdF3WnJqZ7
V/Hhx44BfzBrtGlkyowtT64M2fPfzZytuki77PPp1ZK5tb4cGqzeyIJVy9v7tvbr
HFUDkyqtVbft4cSLGz+OPLny5cybO38OPbr06dSrW7+OPbv27dy7D+99OSRCQ7HK
mz+PPr369ezbu38PP775XHJdqzLUjnBupKj+wWPwLwGAvPXXHy4yALIOHOsoIk8V
ScBlQQASTkhhhRRWYWGGFmKoYYcBcOhhhiCGWOGIJE5o4okfdqBiicLFlZ8iDwLE
oIw3ZNOBOAm0eCGLPEqY4olBkjhkiEV6eGSHSWoooC4xclHjjL9BYUskVe3444pY
/rikiD5y+SWPXW4YZotjukgfO1CuWeMddSB4GxNZainAnGf2uKWYZap4J4p7Cvkn
kS+OxYqafHCRYzdP9HFlnVn2CWSgRkqKJKVKWsokpl7maeagN3HKp6ZkggooqYKa
Oimqlap6KauZKufqpo6CGeuos+pZq4u54nlrp7v6CWuvof4aKbF02in+qq7Clrrs
qc1OGiyyxkJ67KPJ8irts6tqe2m01k57rZ/gjsttpuQi6y2t5cqabbvfrmuru2DS
F84PASlzmby4wqusvr7yi+276N6SSX2aqSWFDucKzLC6/g4LsLgRR+oMPS/yokxS
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
gmFRAAA7

------------3iWa64gvP3nDdSNVtNkmaa--
