<html>
<head>
<title>
14.8  Differences From 80286 Real-Address Mode
</title>
<body>
<a name="14-08"></a>
Prev: <a href="chp14-07.htm">14.7  Differences From 8086</a><br>
Next: <a href="chp15-00.htm">Chapter 15  Virtual 8086 Mode</a>
<hr>
<h2>
14.8  Differences From 80286 Real-Address Mode
</h2>
<p>
The few differences that exist between 80386 real-address mode and 80286
real-address mode are not likely to affect any existing 80286 programs
except possibly the system initialization procedures.
<p>
<p>
<a name="14-08-01"></a>
<h3>14.8.1  Bus Lock</h3>
<p>
The 80286 processor implements the bus lock function differently than the
80386. Programs that use forms of memory locking specific to the 80286 may
not execute properly if transported to a specific application of the 80386.
<p>
The LOCK prefix and its corresponding output signal should only be used to
prevent other bus masters from interrupting a data movement operation.  LOCK
may only be used with the following 80386 instructions when they modify
memory.  An undefined-opcode exception results from using LOCK before any
other instruction.
<p>
<pre>
  -  Bit test and change:  BTS, BTR, BTC.
  -  Exchange: XCHG.
  -  One-operand arithmetic and logical: INC, DEC, NOT, and NEG.
  -  Two-operand arithmetic and logical: ADD, ADC, SUB, SBB, AND, OR, XOR.
</pre>
A locked instruction is guaranteed to lock only the area of memory defined
by the destination operand, but may lock a larger memory area.  For example,
typical 8086 and 80286 configurations lock the entire physical memory space.
With the 80386, the defined area of memory is guranteed to be locked against
access by a processor executing a locked instruction on exactly the same
memory area, i.e., an operand with identical starting address and identical
length.
<p>
<p>
<a name="14-08-02"></a>
<h3>14.8.2  Location of First Instruction</h3>
<p>
The starting location is 0FFFFFFF0H (sixteen bytes from end of 32-bit
address space) on the 80386 rather than 0FFFFF0H (sixteen bytes from end of
24-bit address space) as on the 80286.  Many 80286 ROM initialization
programs will work correctly in this new environment.  Others can be made to
work correctly with external hardware that redefines the signals on
A{31-20}.
<p>
<p>
<a name="14-08-03"></a>
<h3>14.8.3  Initial Values of General Registers</h3>
<p>
On the 80386, certain general registers may contain different values after
RESET than on the 80286. This should not cause compatibility problems,
because the content of 8086 registers after RESET is undefined.  If
self-test is requested during the reset sequence and errors are detected in
the 80386 unit, EAX will contain a nonzero value. EDX contains the component
and revision identifier. Refer to Chapter 10 for more information.
<p>
<p>
<a name="14-08-04"></a>
<h3>14.8.4  MSW Initialization</h3>
<p>
The 80286 initializes the MSW register to FFF0H, but the 80386 initializes
this register to 0000H. This difference should have no effect, because the
bits that are different are undefined on the 80286.  Programs that read the
value of the MSW will behave differently on the 80386 only if they depend on
the setting of the undefined, high-order bits.
<p>
<p>
<hr>
Prev: <a href="chp14-07.htm">14.7  Differences From 8086</a><br>
Next: <a href="chp15-00.htm">Chapter 15  Virtual 8086 Mode</a>
</body>
</html>
