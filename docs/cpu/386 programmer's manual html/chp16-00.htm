<html>
<head>
<title>
Chapter 16  Mixing 16-Bit and 32 Bit Code
</title>
<body>
Prev: <a href="chp15-07.htm">15.7  Differences From 80286 Real-Address Mode</a><br><br>
Next: <a href="chp16-01.htm">16.1  How the 80386 Implements 16-Bit and 32-Bit Features</a>
<hr>
<h2>
Chapter 16  Mixing 16-Bit and 32 Bit Code
</h2>
<hr>
<p>
The 80386 running in protected mode is a 32-bit microprocessor, but it is
designed to support 16-bit processing at three levels:
<ol>
<li>  Executing 8086/80286 16-bit programs efficiently with complete 
<pre>
      compatibility.
</pre>
<li>  Mixing 16-bit modules with 32-bit modules.
<p>
<li>  Mixing 16-bit and 32-bit addresses and operands within one module.
</ol><p>
The first level of support for 16-bit programs has already been discussed
in Chapter 13, Chapter 14, and Chapter 15. This chapter shows how 16-bit
and 32-bit modules can cooperate with one another, and how one module can
utilize both 16-bit and 32-bit operands and addressing.
<p>
The 80386 functions most efficiently when it is possible to distinguish
between pure 16-bit modules and pure 32-bit modules. A pure 16-bit module
has these characteristics:
<ul>
<li>  All segments occupy 64 Kilobytes or less.
<li> Data items are either 8 bits or 16 bits wide.
<li> Pointers to code and data have 16-bit offsets.
<li> Control is transferred only among 16-bit segments.
</ul><p>
A pure 32-bit module has these characteristics:
<ul>
<li> Segments may occupy more than 64 Kilobytes (zero bytes to 4 
<pre>
     gigabytes).
</pre>
<li> Data items are either 8 bits or 32 bits wide.
<p>
<li> Pointers to code and data have 32-bit offsets.
<p>
<li> Control is transferred only among 32-bit segments.
</ul><p>
Pure 16-bit modules do exist; they are the modules designed for 16-bit
microprocessors. Pure 32-bit modules may exist in new programs designed
explicitly for the 80386. However, as systems designers move applications
from 16-bit processors to the 32-bit 80386, it will not always be possible
to maintain these ideals of pure 16-bit or 32-bit modules. It may be
expedient to execute old 16-bit modules in a new 32-bit environment without
making source-code changes to the old modules if any of the following
conditions is true:
<ul>
<li> Modules will be converted one-by-one from 16-bit environments to
<pre>
     32-bit environments.
</pre>
<li> Older, 16-bit compilers and software-development tools will be
<pre>
     utilized in the new32-bit operating environment until new 32-bit
     versions can be created.
</pre>
<li> The source code of 16-bit modules is not available for modification.
<p>
<li> The specific data structures used by a given module inherently utilize
<pre>
     16-bit words.
</pre>
<li> The native word size of the source language is 16 bits.
</ul><p>
On the 80386, 16-bit modules can be mixed with 32-bit modules. To design a
system that mixes 16- and 32-bit code requires an understanding of the
mechanisms that the 80386 uses to invoke and control its 32-bit and 16-bit
features.
<p>
<ul>
<li><a href="chp16-01.htm#16-01">16.1  How the 80386 Implements 16-Bit and 32-Bit Features</a>
<li><a href="chp16-02.htm#16-02">16.2  Mixing 32-Bit and 16-Bit Operations</a>
<li><a href="chp16-03.htm#16-03">16.3  Sharing Data Segments Among Mixed Code Segments</a>
<li><a href="chp16-04.htm#16-04">16.4  Transferring Control Among Mixed Code Segments</a>
<li>    <a href="chp16-04.htm#16-04-01">16.4.1  Size of Code-Segment Pointer</a>
<li>    <a href="chp16-04.htm#16-04-02">16.4.2  Stack Management for Control Transfers</a>
<li>        <a href="chp16-04.htm#16-04-02-01">16.4.2.1  Controlling the Operand-Size for a Call</a>
<li>        <a href="chp16-04.htm#16-04-02-02">16.4.2.2  Changing Size of Call</a>
<li>    <a href="chp16-04.htm#16-04-03">16.4.3  Interrupt Control Transfers</a>
<li>    <a href="chp16-04.htm#16-04-04">16.4.4  Parameter Translation</a>
<li>    <a href="chp16-04.htm#16-04-05">16.4.5  The Interface Procedure</a>
<p>
<li><a href="chp16-04.htm#F-16-01">Figure 16-1.   Stack after Far 16-Bit and 32-Bit Calls</a>
</ul><hr>
Prev: <a href="chp15-07.htm">15.7  Differences From 80286 Real-Address Mode</a><br><br>
Next: <a href="chp16-01.htm">16.1  How the 80386 Implements 16-Bit and 32-Bit Features</a>
</body>
</html>
