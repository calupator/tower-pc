<html>
<head>
<title>
11.2  General Multiprocessing
</title>
<body>
<a name="11-02"></a>
Prev: <a href="chp11-01.htm">11.1  Coprocessing</a><br>
Next: <a href="chp12-00.htm">Chapter 12  Debugging</a>
<hr>
<h2>
11.2  General Multiprocessing
</h2>
<p>
The components of the general multiprocessing interface include:
<ul>
<li> The LOCK# signal

<li> The LOCK instruction prefix, which gives programmed control of the
     LOCK# signal.

<li> Automatic assertion of the LOCK# signal with implicit memory updates
     by the processor
</ul>
<p>
<a name="11-02-01"></a>
<h3>11.2.1  LOCK and the LOCK# Signal</h3>
<p>
The LOCK instruction prefix and its corresponding output signal LOCK# can
be used to prevent other bus masters from interrupting a data movement
operation. LOCK may only be used with the following 80386 instructions when
they modify memory. An undefined-opcode exception results from using LOCK
before any instruction other than:
<ul>
<li> Bit test and change: BTS, BTR, BTC.
<li> Exchange: XCHG.
<li> Two-operand arithmetic and logical: ADD, ADC, SUB, SBB, AND, OR, XOR.
<li> One-operand arithmetic and logical: INC, DEC, NOT, and NEG.
</ul>
A locked instruction is only guaranteed to lock the area of memory defined
by the destination operand, but it may lock a larger memory area. For
example, typical 8086 and 80286 configurations lock the entire physical
memory space. The area of memory defined by the destination operand is
guaranteed to be locked against access by a processor executing a locked
instruction on exactly the same memory area, i.e., an operand with
identical starting address and identical length.
<p>
The integrity of the lock is not affected by the alignment of the memory
field. The LOCK signal is asserted for as many bus cycles as necessary to
update the entire operand.
<p>
<p>
<a name="11-02-02"></a>
<h3>11.2.2  Automatic Locking</h3>
<p>
In several instances, the processor itself initiates activity on the data
bus. To help ensure that such activities function correctly in
multiprocessor configurations, the processor automatically asserts the LOCK#
signal. These instances include:
<ul>
<li> Acknowledging interrupts.
<br>
     After an interrupt request, the interrupt controller uses the data bus
     to send the interrupt ID of the interrupt source to the CPU. The CPU
     asserts LOCK# to ensure that no other data appears on the data bus
     during this time.
<li> Setting busy bit of TSS descriptor.
<br>
     The processor tests and sets the busy-bit in the type field of the TSS
     descriptor when switching to a task. To ensure that two different
     processors cannot simultaneously switch to the same task, the processor
     asserts LOCK# while testing and setting this bit.
<li> Loading of descriptors.
<br>
     While copying the contents of a descriptor from a descriptor table into
     a segment register, the processor asserts LOCK# so that the descriptor
     cannot be modified by another processor while it is being loaded. For
     this action to be effective, operating-system procedures that update
     descriptors should adhere to the following steps:
<ul>
    <li> Use a locked update to the access-rights byte to mark the
         descriptor not-present.

    <li> Update the fields of the descriptor.  (This may require several
         memory accesses; therefore, LOCK cannot be used.)

    <li> Use a locked update to the access-rights byte to mark the
         descriptor present again.
</ul>
<li> Updating page-table A and D bits.
<br>
     The processor exerts LOCK# while updating the A (accessed) and D 
     (dirty) bits of page-table entries.  Also the processor bypasses the
     page-table cache and directly updates these bits in memory.

<li> Executing XCHG instruction.
<br>
     The 80386 always asserts LOCK during an XCHG instruction that
     references memory (even if the LOCK prefix is not used).
</ul>
<p>
<a name="11-02-03"></a>
<h3>11.2.3  Cache Considerations</h3>
<p>
Systems programmers must take care when updating shared data that may also
be stored in on-chip registers and caches.  With the 80386, such  shared
data includes:
<ul>
<li> Descriptors, which may be held in segment registers.
<br>
     A change to a descriptor that is shared among processors should be
     broadcast to all processors.  Segment registers are effectively
     "descriptor caches".  A change to a descriptor will not be utilized by
     another processor if that processor already has a copy of the old
     version of the descriptor in a segment register.
<li> Page tables, which may be held in the page-table cache.
<br>
     A change to a page table that is shared among processors should be
     broadcast to all processors, so that others can flush their page-table
     caches and reload them with up-to-date page tables from memory.
</ul>
Systems designers can employ an interprocessor interrupt to handle the
above cases. When one processor changes data that may be cached by other
processors, it can send an interrupt signal to all other processors that may
be affected by the change. If the interrupt is serviced by an interrupt
task, the task switch automatically flushes the segment registers. The task
switch also flushes the page-table cache if the PDBR (the contents of CR3)
of the interrupt task is different from the PDBR of every other task.
<p>
In multiprocessor systems that need a cacheability signal from the CPU, it
is recommended that physical address pin A31 be used to indicate
cacheability. Such a system can then possess up to 2 Gbytes of physical
memory. The virtual address range available to the programmer is not
affected by this convention.
<p>
<p>
<hr>
Prev: <a href="chp11-01.htm">11.1  Coprocessing</a><br>
Next: <a href="chp12-00.htm">Chapter 12  Debugging</a>
</body>
</html>
