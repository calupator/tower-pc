<html>
<head>
<title>
8.1  I/O Addressing
</title>
<body>
<a name="08-01"></a>
Prev: <a href="chp08-00.htm">Chapter 8  Input/Output</a><br>
Next: <a href="chp08-02.htm">8.2  I/O Instructions</a>
<hr>
<h2>
8.1  I/O Addressing
</h2>
<p>
The 80386 allows input/output to be performed in either of two ways:
<p>
<pre>
  -  By means of a separate I/O address space (using specific I/O
     instructions)

  -  By means of memory-mapped I/O (using general-purpose operand
     manipulationinstructions).
</pre>
<p>
<a name="08-01-01"></a>
<h3>8.1.1  I/O Address Space</h3>
<p>
The 80386 provides a separate I/O address space, distinct from physical
memory, that can be used to address the input/output ports that are used for
external 16 devices. The I/O address space consists of 2^(16) (64K)
individually addressable 8-bit ports; any two consecutive 8-bit ports can be
treated as a 16-bit port; and four consecutive 8-bit ports can be treated
as a 32-bit port. Thus, the I/O address space can accommodate up to 64K
8-bit ports, up to 32K 16-bit ports, or up to 16K 32-bit ports.
<p>
The program can specify the address of the port in two ways. Using an
immediate byte constant, the program can specify:
<p>
<pre>
  -  256 8-bit ports numbered 0 through 255.
  -  128 16-bit ports numbered 0, 2, 4, . . . , 252, 254.
  -  64 32-bit ports numbered 0, 4, 8, . . . , 248, 252.
</pre>
Using a value in DX, the program can specify:
<p>
<pre>
  -  8-bit ports numbered 0 through 65535
  -  16-bit ports numbered 0, 2, 4, . . . , 65532, 65534
  -  32-bit ports numbered 0, 4, 8, . . . , 65528, 65532
</pre>
The 80386 can transfer 32, 16, or 8 bits at a time to a device located in
the I/O space. Like doublewords in memory, 32-bit ports should be aligned at
addresses evenly divisible by four so that the 32 bits can be transferred in
a single bus access. Like words in memory, 16-bit ports should be aligned at
even-numbered addresses so that the 16 bits can be transferred in a single
bus access. An 8-bit port may be located at either an even or odd address.
<p>
The instructions IN and OUT move data between a register and a port in the
I/O address space. The instructions INS and OUTS move strings of data
between the memory address space and ports in the I/O address space.
<p>
<p>
<a name="08-01-02"></a>
<h3>8.1.2  Memory-Mapped I/O</h3>
<p>
I/O devices also may be placed in the 80386 memory address space. As long
as the devices respond like memory components, they are indistinguishable to
the processor.
<p>
Memory-mapped I/O provides additional programming flexibility. Any
instruction that references memory may be used to access an I/O port located
in the memory space. For example, the MOV instruction can transfer data
between any register and a port; and the AND, OR, and TEST instructions may
be used to manipulate bits in the internal registers of a device (see Figure
8-1). Memory-mapped I/O performed via the full instruction set maintains
the full complement of addressing modes for selecting the desired I/O
device (e.g., direct address, indirect address, base register, index
register, scaling).
<p>
Memory-mapped I/O, like any other memory reference, is subject to access
protection and control when executing in protected mode. Refer to Chapter 6
for a discussion of memory protection.
<p>
<p>
<hr>
Prev: <a href="chp08-00.htm">Chapter 8  Input/Output</a><br>
Next: <a href="chp08-02.htm">8.2  I/O Instructions</a>
</body>
</html>
