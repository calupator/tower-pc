<html>
<head>
<title>
2.4  Instruction Format
</title>
<body>
<a name="02-04"></a>
Prev: <a href="chp02-03.htm">2.3  Registers</a><br>
Next: <a href="chp02-05.htm">2.5  Operand Selection</a>
<hr>
<h2>
2.4  Instruction Format
</h2>
<p>
The information encoded in an 80386 instruction includes a specification of
the operation to be performed, the type of the operands to be manipulated,
and the location of these operands. If an operand is located in memory, the
instruction must also select, explicitly or implicitly, which of the
currently addressable segments contains the operand.
<p>
80386 instructions are composed of various elements and have various
formats. The exact format of instructions is shown in Appendix B; the
elements of instructions are described below. Of these instruction elements,
only one, the opcode, is always present. The other elements may or may not
be present, depending on the particular operation involved and on the
location and type of the operands. The elements of an instruction, in order
of occurrence are as follows:
<p>
<pre>
<ul>
<li> Prefixes -- one or more bytes preceding an instruction that modify the
     operation of the instruction. The following types of prefixes can be
     used by applications programs:
<ol>
   <li>  Segment override -- explicitly specifies which segment register an
         instruction should use, thereby overriding the default
         segment-register selection used by the 80386 for that instruction.

   <li>  Address size -- switches between 32-bit and 16-bit address 
         generation.

   <li>  Operand size -- switches between 32-bit and 16-bit operands.

   <li>  Repeat -- used with a string instruction to cause the instruction
         to act on each element of the string.
</ol>
<li> Opcode -- specifies the operation performed by the instruction. Some
     operations have several different opcodes, each specifying a different
     variant of the operation.

<li> Register specifier -- an instruction may specify one or two register
     operands. Register specifiers may occur either in the same byte as the
     opcode or in the same byte as the addressing-mode specifier.

<li> Addressing-mode specifier -- when present, specifies whether an operand
     is a register or memory location; if in memory, specifies whether a
     displacement, a base register, an index register, and scaling are to be
     used.

<li> SIB (scale, index, base) byte -- when the addressing-mode specifier
     indicates that an index register will be used to compute the address of
     an operand, an SIB byte is included in the instruction to encode the
     base register, the index register, and a scaling factor.

<li> Displacement -- when the addressing-mode specifier indicates that a
     displacement will be used to compute the address of an operand, the
     displacement is encoded in the instruction. A displacement is a signed
     integer of 32, 16, or eight bits. The eight-bit form is used in the
     common case when the displacement is sufficiently small. The processor
     extends an eight-bit displacement to 16 or 32 bits, taking into
     account the sign.

<li> Immediate operand -- when present, directly provides the value of an
     operand of the instruction. Immediate operands may be 8, 16, or 32 bits
     wide. In cases where an eight-bit immediate operand is combined in some
     way with a 16- or 32-bit operand, the processor automatically extends
     the size of the eight-bit operand, taking into account the sign.
</ul>
<p>
<hr>
Prev: <a href="chp02-03.htm">2.3  Registers</a><br>
Next: <a href="chp02-05.htm">2.5  Operand Selection</a>
</body>
</html>
