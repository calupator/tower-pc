<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<TITLE>OSD: PC keyboard</TITLE>

<!--
Keyboard Layouts for non-English Scripts
http://crl.NMSU.Edu/~mleisher/keyboards/index.html

-->

<A HREF="../index.htm">OSD Home</A>

<UL>
<LI><A HREF="index.htm#asm"># - Assembly-language keyboard functions using the BIOS</A>
<LI><A HREF="index.htm#cbios"># - C-language keyboard functions using the BIOS</A>
<LI><A HREF="index.htm#nobios"># - Keyboard input without the BIOS</A>
<LI><A HREF="index.htm#kbd"># - 8042 and 8048 registers and command bytes</A>
<LI><A HREF="index.htm#scan">
        # - Keycaps and scancodes for different keyboard types</A>
<LI><A HREF="index.htm#snippets"># - Code snippets</A>
<LI><A HREF="index.htm#links"># - Links</A>
<LI><A HREF="../index.htm#contact"><B>REPORT BUGS OR ERRORS IN THIS DOCUMENT</B></A>
</UL>

<A NAME="asm"></A>
<H2>Assembly-language keyboard functions using the BIOS</H2>

For information on using BIOS keyboard functions, see INT 16h
 in Ralf Brown's interrupt list:
 <A HREF="http://www.cs.cmu.edu/afs/cs/user/ralf/pub/WWW/files.html">
 http://www.cs.cmu.edu/afs/cs/user/ralf/pub/WWW/files.html</A>

<A NAME="cbios"></A>
<H2>C-language keyboard functions using the BIOS</H2>

Both DJGPP and Turbo C <TT>getch()</TT> and <TT>kbhit()</TT> call DOS
 (not BIOS) interrupts. They <B>will not work</B> for OS code. With both
 compilers, you may use <TT>int86()</TT> to access BIOS INT 16h.
 <A HREF="../cons/index.htm#vmm">As with text output,</A> 32-bit code
 requires a V86 mode monitor (VMM) to call 16-bit BIOS routines.

<A NAME="nobios"></A>
<H2>Keyboard input without the BIOS</H2>

The keyboard itself contains an 8048 microprocessor. There is a second
 microprocessor (an 8042) on the motherboard. The keyboard produces one
 or more bytes (the <I>make code</I>) when a key is pressed, and zero,
 one, or more bytes (the <I>break code</I>) when a key is released. An
 IRQ 1 interrupt is generated for each byte. The keyboard interrupt
 handler must read the make or break code (collectively called the
 <I>scan code</I>) from I/O port 60h. <B>Additional IRQ 1 interrupts are
 inhibited (masked) until you read port 60h.</B>
<P>
You may also use polling to read from the keyboard without using
 interrupts (see code snippets below).
<P>
Make and break codes for each key depend on the <I>scancode set</I>:
<UL>
<LI>Scancode set 1: IBM PC XT
<LI>Scancode set 2: IBM PC AT
<LI>Scancode set 3: IBM PS/2
</UL>
For exact scancode values, <A HREF="index.htm#scan"># - see below</A>.
<P>
<B>Only scancode set 2 is widely supported and relatively free of bugs</B>.
 However, the 8042 can be (and usually is) programmed to convert set 2
 scancodes from the keyboard to set 1. The 8042 also handles some
 non-keyboard functions, such as resetting the CPU, controlling the
 A20 gate, and communicating with a PS/2 mouse.

<A NAME="kbd"></A>
<H2><A HREF="kbd.txt">8042 and 8048 registers and command bytes</A></H2>

<A NAME="scan"></A>
<H2>Keycaps and scancodes for different keyboard types</H2>

<TABLE BORDER="1"><TR>
<TD>104-key US keyboard
<TD><A HREF="us-1.txt">Set 1 scancodes</A>
<TD><A HREF="us-2.txt">Set 2 scancodes</A>
<TD><A HREF="us-3.txt">Set 3 scancodes</A>
</TR><TR>
<TD>105-key British keyboard<BR>(from Tim Robinson and Beth Stone)
<TD><A HREF="uk-1.txt">Set 1 scancodes</A>
<TD>Set 2 scancodes
<TD>Set 3 scancodes
</TR><TR>
<TD>104-key German keyboard<BR>(this is guesswork)
<TD><A HREF="de-1.txt">Set 1 scancodes</A>
<TD>Set 2 scancodes
<TD>Set 3 scancodes
</TR></TABLE>

<A NAME="snippets"></A>
<H2>Keyboard code snippets</H2>

<A HREF="kbd.c">Keyboard driver code</A> (DOS; DJGPP or Turbo C or Watcom C)
<P>
Polled keyboard input routine (does not use interrupts):

<PRE>read_kbd:
        in al,64h       ; read status byte
	and al,01h      ; wait for OBF==1
        jz read_kbd
        in al,60h       ; read scancode byte
        ret</PRE>
<P>
Enable A20 gate and verify it's on:
 see <A HREF="../boot/index.htm#snippets">bootstrap code snippets</A>
<P>
Turn on all three keyboard LEDs:

<PRE>                call kbd
		mov al,0EDh     ; 8048 command byte to set LEDs
		out 60h,al
		call kbd
	; b0 is ScrollLock, b1 is NumLock, b2 is CapsLock
		mov al,07h
		out 60h,al

	    ...

	kbd0:   jmp short $+2
		in al,60h
	kbd:    jmp short $+2
		in al,64h
		test al,1
		jnz kbd0
		test al,2
		jnz kbd
		ret				</PRE>

Reset the PC:

<PRE>	; <B>Warning: this function may not work unless A20 is enabled</B>
        ; See http://my.execpc.com/~geezer/osd/gotchas/index.htm#a20_reboot
	;
	; set the POST reset word at 0040h:0072h
	; 0000h for cold boot, 1234h to bypass memory test (warm boot)
		mov ax,40h
		mov es,ax
		mov ax,0
		mov [es:72h],ax

        ; bit b0 of the 8042 'Output Port' drives the CPU reset line
	; pulse it low to reset the system
		call kbd	; kbd routine above
		mov al,0FEh	; 8042 command byte to pulse Output Port pin
		out 64h,al			</PRE>

<A NAME="links"></A>
<H2>Links</H2>

<A HREF="http://homepages.cwi.nl/~aeb/linux/kbd/scancodes.html">
 http://homepages.cwi.nl/~aeb/linux/kbd/scancodes.html</A>
<BR>
<A HREF="http://panda.cs.ndsu.nodak.edu/~achapwes/PICmicro/keyboard/atkeyboard.html">
 http://panda.cs.ndsu.nodak.edu/~achapwes/PICmicro/keyboard/atkeyboard.html</A>
<BR>
<A HREF="http://www.nondot.org/sabre/os/articles/HumanInterfaceDevices/">
 http://www.nondot.org/sabre/os/articles/HumanInterfaceDevices/</A>

<A NAME="todo"></A>
<H2>TO DO</H2>

<PRE>
- converting scan codes to ASCII, Unicode, UTF, etc.
</PRE>

<A NAME="errors"></A>
<H2><A HREF="../index.htm#contact"><B>REPORT BUGS OR ERRORS IN THIS DOCUMENT</B></A></H2>

<SCRIPT language="Javascript">
<!--

// FILE ARCHIVED ON 20061219155031 AND RETRIEVED FROM THE
// INTERNET ARCHIVE ON 20080628002353.
// JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.
// ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
// SECTION 108(a)(3)).

   var sWayBackCGI = "http://web.archive.org/web/20061219155031/";

   function xResolveUrl(url) {
      var image = new Image();
      image.src = url;
      return image.src;
   }
   function xLateUrl(aCollection, sProp) {
      var i = 0;
      for(i = 0; i < aCollection.length; i++) {
         if (typeof(aCollection[i][sProp]) == "string") { 
          if (aCollection[i][sProp].indexOf("mailto:") == -1 &&
             aCollection[i][sProp].indexOf("javascript:") == -1) {
            if(aCollection[i][sProp].indexOf("http") == 0) {
                aCollection[i][sProp] = sWayBackCGI + aCollection[i][sProp];
            } else {
                aCollection[i][sProp] = sWayBackCGI + xResolveUrl(aCollection[i][sProp]);
            }
         }
         }
      }
   }

   xLateUrl(document.getElementsByTagName("IMG"),"src");
   xLateUrl(document.getElementsByTagName("A"),"href");
   xLateUrl(document.getElementsByTagName("AREA"),"href");
   xLateUrl(document.getElementsByTagName("OBJECT"),"codebase");
   xLateUrl(document.getElementsByTagName("OBJECT"),"data");
   xLateUrl(document.getElementsByTagName("APPLET"),"codebase");
   xLateUrl(document.getElementsByTagName("APPLET"),"archive");
   xLateUrl(document.getElementsByTagName("EMBED"),"src");
   xLateUrl(document.getElementsByTagName("BODY"),"background");
   var forms = document.getElementsByTagName("FORM");
   if (forms) {
       var j = 0;
       for (j = 0; j < forms.length; j++) {
              f = forms[j];
              if (typeof(f.action)  == "string") {
                 if(typeof(f.method)  == "string") {
                     if(typeof(f.method) != "post") {
                        f.action = sWayBackCGI + f.action;
                     }
                  }
              }
        }
    }


//-->
</SCRIPT>

